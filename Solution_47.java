//剑指offer位运算实现十进制加法
//思路：不能采用常规加法，通过二进制加法进行联想，分三步：1.不考虑进位的二进制加法(1+0=1,0+1=1,0+0=0，1+1=0)；2. 获取第1步中的进位（1+1=10）；3. 将第1步和第2步的和相加；
//通过上述三步走的思路，我们可以联想到使用位运算，分三步：1.不考虑进位的位运算加法(1^0=1,0^1=1,0^0=0,1^1=0)；2.获取第1步中的进位(关键：因为只有1+1的时候才会出现进位，
//   考虑与运算：1&0=0，0&1=0，0&0=0,1&1=1，符合进位1，但是还需要对进过进行左移1位才能得到10，即(1&1)<<1=10可以作为进位); 3.因为不能使用加法，所以第3步重复1和2的运算，直到进位为0后返回结果;
public class Solution_47 {
    public static void main(String[] lwj){
        //代码测试：
        System.out.println(add_method(15,17));
    }
    public static int add_method(int num1,int num2){
        //定义和以及进位的变量；
        int sum,carry;
        //do...while运算执行循环加法并判断进位是否为0然后直接返回结果
        do {
            //1.不考虑进位的异或运算
            sum=num1^num2;
            //2.获取第1步中的进位，先与(&)后移位(<<)
            carry=(num1&num2)<<1;
            //3.重复1和2的运算
            num1=sum;
            num2=carry;
        }while (num2!=0);//循环停止的条件：进位为0；
        return num1;
    }

}
